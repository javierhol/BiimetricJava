package Ui;

import Model.Conexion_Sqlite;
import Model.DmlJsonDao;
import Model.IDmlJsonDao;
import com.digitalpersona.onetouch.*;
import com.digitalpersona.onetouch.capture.*;
import com.digitalpersona.onetouch.capture.event.*;
import com.digitalpersona.onetouch.processing.*;
import com.digitalpersona.onetouch.verification.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import Domain.ConfigDTO;
import Domain.TempFingerprintDTO;
import Http_Api.EnableSensor;
import Http_Api.FingerprintUserHttpApi;
import java.awt.AWTException;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author Mauricio Herrera
 */
public class Read extends javax.swing.JFrame {

    /**
     * Creates new form Read
     */
    public static int BARRA_DE_ESTADO = 40;
    FileInputStream fis;
    // objetos propios de las librerias del lector
    private final DPFPCapture lector = DPFPGlobal.getCaptureFactory().createCapture();
    private final DPFPEnrollment reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private final DPFPVerification verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPTemplate template;
    private static final String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featuresVerification;
    private Image fingerprintImage;
    public static boolean listenersAdd = false;

    public Read() {
        initComponents();
        setResizable(false);
        setIconImage(new ImageIcon(getClass().getResource("/images/fingerprint_32px.png")).getImage());
        Robot r;
        try {
            r = new Robot();
            int tamX = getWidth();
            int tamY = getHeight();
            int maxX = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
            int maxY = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
            setLocation(maxX - tamX, maxY - tamY - BARRA_DE_ESTADO);
            r.mouseMove(maxX + 240 - tamX, maxY - tamY + 10);
            r.mousePress(InputEvent.BUTTON1_MASK);
            r.mouseRelease(InputEvent.BUTTON1_MASK);
        } catch (AWTException ex) {
            System.out.println("error " + ex);
        }
        requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblFingerprintImage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNotificacion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sensor Read Mode");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(42, 63, 84));

        lblFingerprintImage.setBackground(new java.awt.Color(255, 255, 255));
        lblFingerprintImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFingerprintImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/finger.png"))); // NOI18N
        lblFingerprintImage.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFingerprintImage, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFingerprintImage, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        txtNotificacion.setColumns(20);
        txtNotificacion.setRows(5);
        jScrollPane1.setViewportView(txtNotificacion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        EnableSensor.getConfig();
        EnableSensor.closeSensor();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Read.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Read().setVisible(true);
            }
        });
    }

    public void start() {
        lector.startCapture();
        setTexto("Utilizando el lector de huella dactilar");
    }

    public void prepare() {
        if (listenersAdd == false) {
            lector.addDataListener(new DPFPDataAdapter() {
                @Override
                public void dataAcquired(final DPFPDataEvent e) {
                    SwingUtilities.invokeLater(() -> {
                        try {
                            setTexto("Huella dactilar capturada.!");
                            ProcesarCaptura(e.getSample());
                            identificarHuella();
                            reclutador.clear();
                        } catch (IOException ex) {
                            System.out.println("error " + ex);
                        } catch (Exception ex) {
                            System.out.println("error " + ex);
                        }
                    });
                }
            });

            lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
                @Override
                public void readerConnected(final DPFPReaderStatusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setTexto("Sensor activado o conectado.!");
                        }
                    });
                }

                @Override
                public void readerDisconnected(final DPFPReaderStatusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setTexto("Sensor desactivado o no conectado.!");
                        }
                    });
                }
            });

            lector.addSensorListener(new DPFPSensorAdapter() {
                @Override
                public void fingerTouched(final DPFPSensorEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setTexto("Dedo colocado sobre el lector.!");
                        }
                    });
                }

                @Override
                public void fingerGone(final DPFPSensorEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setTexto("Dedo retirado del lector.!");
                        }
                    });
                }

            });

            lector.addErrorListener(new DPFPErrorAdapter() {
                public void errorReader(final DPFPErrorEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            setTexto("Ocurrio un error con el lector.!");
                        }
                    });
                }
            });
        }
        listenersAdd = true;
    }

    public void stop() {
        lector.stopCapture();
    }

    private void ProcesarCaptura(DPFPSample sample) throws IOException, Exception {
        featuresVerification = extractFingerprintCharacteristics(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        if (featuresVerification != null) {
            try {
                reclutador.addFeatures(featuresVerification);
                Image image = CreateImageFingerprint(sample);
                setFingerprintImage(image);
                drawFingerImage(image);
            } catch (DPFPImageQualityException e) {
                System.out.println("Error: " + e.getMessage());
            } finally {
                switch (reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:
                        System.out.println("Plantilla ok");
                        break;
                    case TEMPLATE_STATUS_FAILED:
                        reclutador.clear();
                        stop();
                        setTemplate(null);
                        System.out.println("La plantilla no pudo ser creada");
                        start();
                        break;
                }
            }
        }
    }

    public void drawFingerImage(Image image) {
        lblFingerprintImage.setIcon(new ImageIcon(
                image.getScaledInstance(lblFingerprintImage.getWidth(), lblFingerprintImage.getHeight(), Image.SCALE_DEFAULT)));
        lblFingerprintImage.repaint();
    }

    //metodo Identificar huella
    private void identificarHuella() {
        Conexion_Sqlite con;
        TempFingerprintDTO tfdto = null;
        FingerprintUserHttpApi.getConfig();
        try {
            con = new Conexion_Sqlite();
            ArrayList<TempFingerprintDTO> lista = con.list();
            boolean isVerified = false;
            for (int i = 0; i < lista.size(); i++) {
                byte[] templateBuffer = Base64.getDecoder().decode(lista.get(i).getFingerprint());
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate();
                referenceTemplate.deserialize(templateBuffer);
                DPFPVerificationResult resultado = verificador.verify(featuresVerification, referenceTemplate);
                if (resultado.isVerified()) {
                    System.out.println("verificado en sqlite");
                    tfdto = new TempFingerprintDTO();
                    tfdto.setName(lista.get(i).getName());
                    tfdto.setUser_id_number(lista.get(i).getUser_id_number());
                    tfdto.setUser_id(lista.get(i).getUser_id());
                    tfdto.setFingerprint(null);
                    tfdto.setText("Registro Correcto..!");
                    tfdto.setImage(getEncodeImage(getFingerprintImage()));
                    isVerified = true;
                    break;
                }
            }

            if (!isVerified) {
                boolean flag = false;
                int totalPages = 1;
                int from = 0;
                HashMap<String, Integer> data;

                for (int i = 0; i < totalPages; i++) {
                    data = new HashMap<>();
                    data.put("from", from);
                    JsonArray list = FingerprintUserHttpApi.postListFinger(data);
                    for (JsonElement jsonElement : list) {
                        JsonObject jsonObject = jsonElement.getAsJsonObject();
                        totalPages = (int) Math.round(jsonObject.get("count").getAsDouble() / 10); // Si la iteracciones no aumentan poner aqui  + 1
                        DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate();
                        byte[] templateBuffer = Base64.getDecoder().decode(jsonObject.get("fingerprint").getAsString());
                        referenceTemplate.deserialize(templateBuffer);
                        DPFPVerificationResult resultado = verificador.verify(featuresVerification, referenceTemplate);
                        if (resultado.isVerified()) {
                            tfdto = new TempFingerprintDTO();
                            tfdto.setName(jsonObject.get("name").getAsString());
                            tfdto.setUser_id_number(jsonObject.get("user_id_number").getAsString());
                            tfdto.setUser_id(jsonObject.get("id").getAsString());
                            tfdto.setFingerprint(null);
                            tfdto.setText("Registro Correcto..!");
                            tfdto.setImage(getEncodeImage(getFingerprintImage()));
                            flag = true;
                            break;
                        }
                    }
                    if (flag) {
                        break;
                    }
                    from += 10;
                }
            }

            if (tfdto == null) {
                tfdto = new TempFingerprintDTO();
                tfdto.setName("-----");
                tfdto.setUser_id_number("-----");
                tfdto.setUser_id("0");
                tfdto.setFingerprint(null);
                tfdto.setText("El usuario no existe..!");
                tfdto.setImage(getEncodeImage(getFingerprintImage()));
            }
            FingerprintUserHttpApi.postUpdateFinger(tfdto);
            tfdto = null;
        } catch (JsonSyntaxException | IllegalArgumentException e) {
            System.out.println("Error clase Read, metodo: identificarHuella() " + e.getMessage());
        } finally {
            con = null;
        }
    }

    private String getEncodeImage(Image imageHuella) {
        ImageIcon icon = new ImageIcon(imageHuella);
        BufferedImage image = new BufferedImage(480, 530, BufferedImage.TYPE_INT_RGB);
        byte[] imageInByte = null;
        Graphics2D g2d = image.createGraphics();
        g2d.drawImage(imageHuella, 0, 0, 480, 530, icon.getImageObserver());
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(image, "jpg", baos);
            baos.flush();
            imageInByte = baos.toByteArray();
        } catch (IOException e) {
           System.out.println("Error clase: Enroll, metodo getEncodeImage() " + e.getMessage());
        }
        return Base64.getEncoder().encodeToString(imageInByte);
    }

    private DPFPFeatureSet extractFingerprintCharacteristics(DPFPSample sample, DPFPDataPurpose dpfpDataPurpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, dpfpDataPurpose);
        } catch (DPFPImageQualityException e) {
            System.out.println("error generando caracteristicas: " + e.getMessage());
            return null;
        }
    }

    private Image CreateImageFingerprint(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    private void setFingerprintImage(Image image) {
        this.fingerprintImage = image;
    }

    private void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    private void setTexto(String texto) {
        if (txtNotificacion.getLineCount() > 3) {
            txtNotificacion.setText("");
            txtNotificacion.append(texto + "\n");
        } else {
            txtNotificacion.append(texto + "\n");
        }
    }

    public Image getFingerprintImage() {
        return fingerprintImage;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFingerprintImage;
    public static javax.swing.JTextArea txtNotificacion;
    // End of variables declaration//GEN-END:variables
}
